/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package danieljuarez_lab8p2;

import java.util.Random;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;

/**
 *
 * @author danie
 */
public class Principal extends javax.swing.JFrame {

    ArrayList<Mascota> MascotasDisponibles = new ArrayList();
    ArrayList<Zona> Zonas = new ArrayList();
    ArrayList<Item> ItemsDisponibles = new ArrayList();
    int ContadorItems = 1;
    int ContadorZonas = 1;
    static Random random = new Random();
    Jugador player = new Jugador();
    Mascota currentpet = new Mascota();

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        player.setDinero(1000);
        player.setDineroBanco(1000);

        b = new Barra(PetProgressBar, false, true, 0);
        Thread proceso = new Thread(b);
        proceso.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainTabbedPane = new javax.swing.JTabbedPane();
        MascotaTab = new javax.swing.JPanel();
        PetProgressBar = new javax.swing.JProgressBar();
        PetScrollPane = new javax.swing.JScrollPane();
        PetTable = new javax.swing.JTable();
        AdminTab = new javax.swing.JPanel();
        CrearMascota = new javax.swing.JLabel();
        NombrePet = new javax.swing.JLabel();
        PetNombreTextField = new javax.swing.JTextField();
        PuntosdeVida = new javax.swing.JLabel();
        PuntosVidaTextField = new javax.swing.JTextField();
        Delay = new javax.swing.JLabel();
        DelayTextField = new javax.swing.JTextField();
        Costo = new javax.swing.JLabel();
        CostoTextField = new javax.swing.JTextField();
        ColorButton = new javax.swing.JButton();
        CrearPetButton = new javax.swing.JButton();
        CrearItem = new javax.swing.JLabel();
        NombreItem = new javax.swing.JLabel();
        ItemNombreTextField = new javax.swing.JTextField();
        AlimentoCheckBox = new javax.swing.JCheckBox();
        Obtencion = new javax.swing.JLabel();
        ObtencionTextField = new javax.swing.JTextField();
        PrecioVenta = new javax.swing.JLabel();
        PrecioVentaTextField = new javax.swing.JTextField();
        CrearItemButton = new javax.swing.JButton();
        CrearZona = new javax.swing.JLabel();
        NombreZona = new javax.swing.JLabel();
        ZonaNombreTextField = new javax.swing.JTextField();
        Derrumbe = new javax.swing.JLabel();
        DerrumbeTextField = new javax.swing.JTextField();
        Ataque = new javax.swing.JLabel();
        AtaqueTextField = new javax.swing.JTextField();
        AgregarItem = new javax.swing.JLabel();
        AddItemScrollPane = new javax.swing.JScrollPane();
        AddItemList = new javax.swing.JList<>();
        Items = new javax.swing.JLabel();
        ItemsScrollPane = new javax.swing.JScrollPane();
        ItemsList = new javax.swing.JList<>();
        AgregarItemButton = new javax.swing.JButton();
        CrearZonaButton = new javax.swing.JButton();
        ComandosTab = new javax.swing.JPanel();
        OutputScrollPane = new javax.swing.JScrollPane();
        OutputTextArea = new javax.swing.JTextArea();
        InputTextField = new javax.swing.JTextField();
        InputButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Delay", "Costo", "Color", "Puntos de Vida"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PetScrollPane.setViewportView(PetTable);

        javax.swing.GroupLayout MascotaTabLayout = new javax.swing.GroupLayout(MascotaTab);
        MascotaTab.setLayout(MascotaTabLayout);
        MascotaTabLayout.setHorizontalGroup(
            MascotaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MascotaTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MascotaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(PetScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                    .addComponent(PetProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        MascotaTabLayout.setVerticalGroup(
            MascotaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MascotaTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PetProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PetScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addContainerGap())
        );

        MainTabbedPane.addTab("Mascota", MascotaTab);

        CrearMascota.setText("Crear Mascota");

        NombrePet.setText("Nombre");

        PuntosdeVida.setText("Puntos de Vida");

        Delay.setText("Delay");

        Costo.setText("Costo");

        ColorButton.setText("Color");
        ColorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ColorButtonMouseClicked(evt);
            }
        });

        CrearPetButton.setText("Crear Mascota");
        CrearPetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CrearPetButtonMouseClicked(evt);
            }
        });

        CrearItem.setText("Crear Item");

        NombreItem.setText("Nombre");

        AlimentoCheckBox.setText("Alimento");

        Obtencion.setText("Probabilidad de Obtenci√≥n");

        PrecioVenta.setText("Precio de Venta");

        CrearItemButton.setText("Crear Item");
        CrearItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CrearItemButtonMouseClicked(evt);
            }
        });

        CrearZona.setText("Crear Zona");

        NombreZona.setText("Nombre");

        Derrumbe.setText("Probabilidad de Derrumbe");

        Ataque.setText("Probabilidad de Ataque");

        AgregarItem.setText("Agregar Item");

        AddItemList.setModel(new DefaultListModel());
        AddItemScrollPane.setViewportView(AddItemList);

        Items.setText("Items");

        ItemsList.setModel(new DefaultListModel());
        ItemsScrollPane.setViewportView(ItemsList);

        AgregarItemButton.setText("Agregar Item");
        AgregarItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AgregarItemButtonMouseClicked(evt);
            }
        });

        CrearZonaButton.setText("Crear Zona");
        CrearZonaButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CrearZonaButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout AdminTabLayout = new javax.swing.GroupLayout(AdminTab);
        AdminTab.setLayout(AdminTabLayout);
        AdminTabLayout.setHorizontalGroup(
            AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CrearMascota)
                    .addComponent(NombrePet)
                    .addComponent(PuntosdeVida)
                    .addComponent(Delay)
                    .addComponent(PetNombreTextField)
                    .addComponent(PuntosVidaTextField)
                    .addComponent(DelayTextField)
                    .addComponent(Costo)
                    .addComponent(CostoTextField)
                    .addComponent(ColorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CrearPetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                .addGap(31, 31, 31)
                .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(CrearItem)
                        .addComponent(NombreItem)
                        .addComponent(ItemNombreTextField)
                        .addComponent(AlimentoCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Obtencion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ObtencionTextField)
                    .addComponent(PrecioVenta)
                    .addComponent(PrecioVentaTextField)
                    .addComponent(CrearItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CrearZona)
                    .addGroup(AdminTabLayout.createSequentialGroup()
                        .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AgregarItem)
                            .addComponent(NombreZona)
                            .addComponent(Derrumbe, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Ataque)
                            .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(DerrumbeTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                                .addComponent(AtaqueTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(AddItemScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(ZonaNombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Items)
                                .addComponent(AgregarItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CrearZonaButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(ItemsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        AdminTabLayout.setVerticalGroup(
            AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AdminTabLayout.createSequentialGroup()
                        .addComponent(CrearMascota)
                        .addGap(18, 18, 18)
                        .addComponent(NombrePet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PetNombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(PuntosdeVida)
                        .addGap(4, 4, 4)
                        .addComponent(PuntosVidaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Delay)
                        .addGap(4, 4, 4)
                        .addComponent(DelayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Costo)
                        .addGap(4, 4, 4)
                        .addComponent(CostoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ColorButton)
                        .addGap(18, 18, 18)
                        .addComponent(CrearPetButton)
                        .addContainerGap(41, Short.MAX_VALUE))
                    .addGroup(AdminTabLayout.createSequentialGroup()
                        .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CrearItem)
                            .addComponent(CrearZona))
                        .addGap(18, 18, 18)
                        .addComponent(NombreItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ItemNombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(AlimentoCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(Obtencion)
                        .addGap(4, 4, 4)
                        .addComponent(ObtencionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(PrecioVenta)
                        .addGap(4, 4, 4)
                        .addComponent(PrecioVentaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CrearItemButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(AdminTabLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AdminTabLayout.createSequentialGroup()
                                .addComponent(Items)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ItemsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(AgregarItemButton)
                                .addGap(18, 18, 18)
                                .addComponent(CrearZonaButton))
                            .addGroup(AdminTabLayout.createSequentialGroup()
                                .addComponent(NombreZona)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ZonaNombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(AdminTabLayout.createSequentialGroup()
                                        .addGap(56, 56, 56)
                                        .addComponent(Ataque)
                                        .addGap(24, 24, 24))
                                    .addGroup(AdminTabLayout.createSequentialGroup()
                                        .addComponent(Derrumbe)
                                        .addGap(3, 3, 3)
                                        .addComponent(DerrumbeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(AtaqueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(AgregarItem)
                                .addGap(4, 4, 4)
                                .addComponent(AddItemScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        MainTabbedPane.addTab("Administraci√≥n", AdminTab);

        OutputTextArea.setColumns(20);
        OutputTextArea.setRows(5);
        OutputScrollPane.setViewportView(OutputTextArea);

        InputButton.setText("Ir");
        InputButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InputButtonMouseClicked(evt);
            }
        });
        InputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ComandosTabLayout = new javax.swing.GroupLayout(ComandosTab);
        ComandosTab.setLayout(ComandosTabLayout);
        ComandosTabLayout.setHorizontalGroup(
            ComandosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ComandosTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ComandosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OutputScrollPane)
                    .addGroup(ComandosTabLayout.createSequentialGroup()
                        .addComponent(InputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(InputButton, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ComandosTabLayout.setVerticalGroup(
            ComandosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ComandosTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OutputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(ComandosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputButton))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        MainTabbedPane.addTab("Comandos", ComandosTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputButtonActionPerformed

    private void ColorButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ColorButtonMouseClicked
        ColorButton.setBackground(JColorChooser.showDialog(rootPane, "Seleccione un Color", Color.yellow));
    }//GEN-LAST:event_ColorButtonMouseClicked

    private void CrearPetButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CrearPetButtonMouseClicked
        String Nombre = PetNombreTextField.getText();
        int PuntosVida = Integer.parseInt(PuntosVidaTextField.getText());
        int Delay = Integer.parseInt(DelayTextField.getText());
        int Costo = Integer.parseInt(CostoTextField.getText());
        Color ColorMascota = ColorButton.getBackground();
        Mascota m = new Mascota(Nombre, PuntosVida, PuntosVida, Delay, Costo, ColorMascota);
        MascotasDisponibles.add(m);

        PetNombreTextField.setText("");
        PuntosVidaTextField.setText("");
        DelayTextField.setText("");
        CostoTextField.setText("");
        ColorButton.setBackground(null);

    }//GEN-LAST:event_CrearPetButtonMouseClicked

    private void CrearItemButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CrearItemButtonMouseClicked
        int ID = ContadorItems;
        String Nombre = ItemNombreTextField.getText();
        boolean Alimentos;
        if (AlimentoCheckBox.isSelected()) {
            Alimentos = true;
        } else {
            Alimentos = false;
        }
        int Obtencion = Integer.parseInt(ObtencionTextField.getText());
        int Precio = Integer.parseInt(PrecioVentaTextField.getText());
        Item i = new Item(ID, Nombre, Alimentos, Obtencion, Precio);
        ItemsDisponibles.add(i);

        DefaultListModel modelo = (DefaultListModel) AddItemList.getModel();
        modelo.addElement(i);
        AddItemList.setModel(modelo);

        ItemNombreTextField.setText("");
        ObtencionTextField.setText("");
        PrecioVentaTextField.setText("");
        AlimentoCheckBox.setSelected(false);
        ContadorItems++;

    }//GEN-LAST:event_CrearItemButtonMouseClicked

    private void CrearZonaButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CrearZonaButtonMouseClicked

        Zona z = new Zona();

        int ID = ContadorZonas;
        String Nombre = ZonaNombreTextField.getText();
        int numero = 100 + random.nextInt(200);
        int Remuneracion = ID * numero;
        int PropDerrumbe = Integer.parseInt(DerrumbeTextField.getText());
        int PropAtaque = Integer.parseInt(AtaqueTextField.getText());

        DefaultListModel listaadd
                = (DefaultListModel) ItemsList.getModel();

        for (int i = 0; i < listaadd.size(); i++) {
            z.ItemsZona.add((Item) listaadd.getElementAt(i));
        }

        z.setIDZona(ID);
        z.setNombreZona(Nombre);
        z.setRemuneracion(Remuneracion);
        z.setProbabilidadDerrumbe(PropDerrumbe);
        z.setProbabilidadAtaque(PropAtaque);

        Zonas.add(z);

        ZonaNombreTextField.setText("");
        DerrumbeTextField.setText("");
        AtaqueTextField.setText("");

        DefaultListModel erase
                = (DefaultListModel) ItemsList.getModel();
        erase.clear();
        ItemsList.setModel(erase);
        ContadorZonas++;

    }//GEN-LAST:event_CrearZonaButtonMouseClicked

    private void AgregarItemButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AgregarItemButtonMouseClicked
        DefaultListModel listabase
                = (DefaultListModel) AddItemList.getModel();
        DefaultListModel listaadd
                = (DefaultListModel) ItemsList.getModel();

        listaadd.add(0, listabase.get(AddItemList.getSelectedIndex()));
    }//GEN-LAST:event_AgregarItemButtonMouseClicked

    private void InputButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InputButtonMouseClicked

        String comando = InputTextField.getText();
        String mascota = "";

        OutputTextArea.append("\n");
        if (comando.contains("!pet active")) {
            for (int i = 0; i < player.MascotasJugador.size(); i++) {
                if (comando.contains(player.MascotasJugador.get(i).getNombreMascota())) {
                    currentpet = player.MascotasJugador.get(i);
                    OutputTextArea.append("Mascota Activa: " + currentpet + "\n");
                    PetProgressBar.setBackground(currentpet.getColorMascota());
                    b.Decrease = currentpet.Delay;
                    b.YaSet = true;
                    b.start();
                }
            }
        }
        if (comando.contains("!pet feed")) {
            for (int i = 0; i < player.ItemsJugador.size(); i++) {
                int comida = Integer.parseInt(comando.substring(10, comando.length()));
                if (player.ItemsJugador.get(i).IDItem == comida) {
                    if (player.ItemsJugador.get(i).isAlimento()) {
                        OutputTextArea.append("Has Alimentado a " + currentpet + " con " + player.ItemsJugador.get(i).getNombreItem() + "\n");
                        currentpet.setPuntosVidaDecrease(currentpet.getPuntosVida());
                        player.ItemsJugador.remove(i);
                        b.Decrease = currentpet.Delay;
                    } else {
                        OutputTextArea.append("El Item " + player.ItemsJugador.get(i) + " No Es Un Alimento\n");
                    }
                }
            }
        }
        if (comando.equals("!pet list")) {
            if (MascotasDisponibles.isEmpty()) {
                OutputTextArea.append("No Hay Mascotas en Lista");
            } else {
                OutputTextArea.append("Lista Mascotas\n");
                for (int i = 0; i < MascotasDisponibles.size(); i++) {
                    OutputTextArea.append(i + " - " + MascotasDisponibles.get(i) + "\n");
                }
            }
        }
        if (comando.contains("!adopt")) {
            if (MascotasDisponibles.isEmpty()) {
                OutputTextArea.append("No Hay Mascotas Disponibles");
            } else {
                for (int i = 0; i < MascotasDisponibles.size(); i++) {
                    String pet = comando.substring(7, comando.length());
                    if (MascotasDisponibles.get(i).NombreMascota.equals(pet)) {
                        if (MascotasDisponibles.get(i).getCostoMascota() < player.Dinero) {
                            player.MascotasJugador.add(MascotasDisponibles.get(i));
                            OutputTextArea.append("Ha adoptado a " + MascotasDisponibles.get(i));
                            MascotasDisponibles.remove(i);
                        } else {
                            OutputTextArea.append("No Tiene el Dinero Suficiente Para Adoptar a " + MascotasDisponibles.get(i));
                        }
                    }
                }
            }
        }
        int numero = 1 + random.nextInt(99);
        if (comando.contains("!mine")) {
            for (int i = 0; i < Zonas.size(); i++) {
                int zona = Integer.parseInt(comando.substring(6, comando.length()));
                if (Zonas.get(i).IDZona == zona) {
                    if (numero > Zonas.get(i).getProbabilidadDerrumbe()) {
                        int item = 0 + random.nextInt(Zonas.get(i).ItemsZona.size());
                        player.Dinero = player.Dinero + Zonas.get(i).Remuneracion;
                        OutputTextArea.append("Ha Ganado " + Zonas.get(i).getRemuneracion() + "\n");
                        player.ItemsJugador.add(Zonas.get(i).getItemsZona().get(item));
                        OutputTextArea.append("Ha Ganado un " + Zonas.get(i).getItemsZona().get(item).NombreItem + "\n");
                    } else {
                        OutputTextArea.append("La Mina Se Derrumb√≥\n");
                        player.Dinero = 0;
                    }
                }
            }
        }
        if (comando.contains("!fish")) {
            for (int i = 0; i < Zonas.size(); i++) {
                int zona = Integer.parseInt(comando.substring(6, comando.length()));
                if (Zonas.get(i).IDZona == zona) {
                    if (numero > Zonas.get(i).getProbabilidadAtaque()) {
                        int item = 0 + random.nextInt(Zonas.get(i).ItemsZona.size());
                        player.Dinero = player.Dinero + Zonas.get(i).Remuneracion;
                        OutputTextArea.append("Ha Ganado " + Zonas.get(i).getRemuneracion() + "\n");
                        player.ItemsJugador.add(Zonas.get(i).getItemsZona().get(item));
                        OutputTextArea.append("Ha Ganado un " + Zonas.get(i).getItemsZona().get(item).NombreItem + "\n");
                    } else {
                        OutputTextArea.append("Usted Fue Atacado\n");
                        player.Dinero = 0;
                    }
                }
            }
        }
        if (comando.equals("!zone list")) {
            OutputTextArea.append("Lista Zonas\n");
            for (int i = 0; i < Zonas.size(); i++) {
                OutputTextArea.append(Zonas.get(i).getIDZona() + " - " + Zonas.get(i) + "\n");
            }
        }
        if (comando.contains("!sell")) {
            for (int i = 0; i < player.ItemsJugador.size(); i++) {
                int item = Integer.parseInt(comando.substring(6, comando.length()));
                if (player.ItemsJugador.get(i).IDItem == item) {
                    player.Dinero = player.Dinero + player.ItemsJugador.get(i).getPrecioItem();
                    OutputTextArea.append("Ha Vendido el Item " + player.ItemsJugador.get(i) + " Ganando " + player.ItemsJugador.get(i).getPrecioItem() + "\n");
                    player.ItemsJugador.remove(i);
                }
            }
        }
        if (comando.equals("!item list")) {
            if (ItemsDisponibles.isEmpty()) {
                OutputTextArea.append("No Hay Items\n");
            } else {
                OutputTextArea.append("Lista Items Disponibles\n");
                for (int i = 0; i < ItemsDisponibles.size(); i++) {
                    OutputTextArea.append(ItemsDisponibles.get(i).getIDItem() + " - " + ItemsDisponibles.get(i) + "\n");
                }
            }
        }
        if (comando.contains("!buy")) {
            if (ItemsDisponibles.isEmpty()) {
                OutputTextArea.append("No Hay Items Disponibles\n");
            } else {
                for (int i = 0; i < ItemsDisponibles.size(); i++) {
                    System.out.println(ItemsDisponibles.get(i));
                }
                for (int i = 0; i < ItemsDisponibles.size(); i++) {
                    int item = Integer.parseInt(comando.substring(5, comando.length()));
                    if (ItemsDisponibles.get(i).IDItem == item) {
                        System.out.println("item" + item);
                        System.out.println("id" + ItemsDisponibles.get(i).IDItem);
                        System.out.println("id item if");
                        if (player.Dinero > ItemsDisponibles.get(i).PrecioItem) {
                            System.out.println("money if");
                            player.Dinero = player.Dinero - ItemsDisponibles.get(i).PrecioItem;
                            player.ItemsJugador.add(ItemsDisponibles.get(i));
                            OutputTextArea.append("Ha Comprado " + ItemsDisponibles.get(i) + "\n");
                            ItemsDisponibles.remove(i);
                            break;
                        } else {
                            OutputTextArea.append("No Tiene El Dinero Suficiente Para " + ItemsDisponibles.get(i) + "\n");
                            break;
                        }
                    } else {
                        OutputTextArea.append("Este Item No Existe\n");
                    }
                }
            }
        }
        if (comando.equals("!bag")) {
            if (player.ItemsJugador.isEmpty()) {
                OutputTextArea.append("Su Lista de Items Est√° Vac√≠a\n");
            } else {
                OutputTextArea.append("Lista Items del Usuario\n");
                for (int i = 0; i < player.ItemsJugador.size(); i++) {
                    if (player.ItemsJugador.isEmpty()) {
                    } else {
                        OutputTextArea.append(player.ItemsJugador.get(i).getIDItem() + " - " + player.ItemsJugador.get(i) + "\n");
                    }
                }
            }
        }
        if (comando.contains("!d")) {
            int deposito = Integer.parseInt(comando.substring(3, comando.length()));
            if (player.Dinero > deposito) {
                OutputTextArea.append("Se Ha Depositado " + deposito + " a Su Cuenta\n");
                player.Dinero = player.Dinero - deposito;
                player.DineroBanco = player.DineroBanco + deposito;
            } else {
                OutputTextArea.append("No Cuenta Con Tanto Dinero En Su Bolsa\n");
            }
        }
        if (comando.contains("!w")) {
            int retiro = Integer.parseInt(comando.substring(3, comando.length()));
            if (player.DineroBanco > retiro) {
                OutputTextArea.append("Se Ha Retirado " + retiro + " a Su Cuenta\n");
                player.DineroBanco = player.DineroBanco - retiro;
                player.Dinero = player.Dinero + retiro;
            } else {
                OutputTextArea.append("No Cuenta Con Tanto Dinero En Su Cuenta\n");
            }
        }
        if (comando.equals("!b")) {
            OutputTextArea.append("Estado de Cuentas\n");
            OutputTextArea.append("Dinero: " + player.getDinero() + "\nBanco: " + player.getDineroBanco() + "\n");
        }
        if (comando.equals("!clear")) {
            OutputTextArea.setText("");
        }
        InputTextField.setText("");
    }//GEN-LAST:event_InputButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> AddItemList;
    private javax.swing.JScrollPane AddItemScrollPane;
    private javax.swing.JPanel AdminTab;
    private javax.swing.JLabel AgregarItem;
    private javax.swing.JButton AgregarItemButton;
    private javax.swing.JCheckBox AlimentoCheckBox;
    private javax.swing.JLabel Ataque;
    private javax.swing.JTextField AtaqueTextField;
    private javax.swing.JButton ColorButton;
    private javax.swing.JPanel ComandosTab;
    private javax.swing.JLabel Costo;
    private javax.swing.JTextField CostoTextField;
    private javax.swing.JLabel CrearItem;
    private javax.swing.JButton CrearItemButton;
    private javax.swing.JLabel CrearMascota;
    private javax.swing.JButton CrearPetButton;
    private javax.swing.JLabel CrearZona;
    private javax.swing.JButton CrearZonaButton;
    private javax.swing.JLabel Delay;
    private javax.swing.JTextField DelayTextField;
    private javax.swing.JLabel Derrumbe;
    private javax.swing.JTextField DerrumbeTextField;
    private javax.swing.JButton InputButton;
    private javax.swing.JTextField InputTextField;
    private javax.swing.JTextField ItemNombreTextField;
    private javax.swing.JLabel Items;
    private javax.swing.JList<String> ItemsList;
    private javax.swing.JScrollPane ItemsScrollPane;
    private javax.swing.JTabbedPane MainTabbedPane;
    private javax.swing.JPanel MascotaTab;
    private javax.swing.JLabel NombreItem;
    private javax.swing.JLabel NombrePet;
    private javax.swing.JLabel NombreZona;
    private javax.swing.JLabel Obtencion;
    private javax.swing.JTextField ObtencionTextField;
    private javax.swing.JScrollPane OutputScrollPane;
    private javax.swing.JTextArea OutputTextArea;
    private javax.swing.JTextField PetNombreTextField;
    private javax.swing.JProgressBar PetProgressBar;
    private javax.swing.JScrollPane PetScrollPane;
    private javax.swing.JTable PetTable;
    private javax.swing.JLabel PrecioVenta;
    private javax.swing.JTextField PrecioVentaTextField;
    private javax.swing.JTextField PuntosVidaTextField;
    private javax.swing.JLabel PuntosdeVida;
    private javax.swing.JTextField ZonaNombreTextField;
    // End of variables declaration//GEN-END:variables

    Barra b;
}
